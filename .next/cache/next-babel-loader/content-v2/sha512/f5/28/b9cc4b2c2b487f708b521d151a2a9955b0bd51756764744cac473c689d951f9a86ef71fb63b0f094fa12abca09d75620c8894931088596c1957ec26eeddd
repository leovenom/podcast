{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/leonardt/code/React/podcasternext/src/components/Player/index.tsx\";\nimport Image from 'next/image';\nimport { useRef, useEffect, useState } from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { usePlayer } from '../../contexts/PlayerContext';\nimport styles from './styles.module.scss';\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\nexport function Player() {\n  var _episode$duration;\n\n  const audioRef = useRef(null);\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n  const {\n    episodeList,\n    currentEpisodeIndex,\n    isPlaying,\n    isLooping,\n    isShuffling,\n    togglePlay,\n    toggleLoop,\n    toggleShuffle,\n    setPlayingState,\n    playNext,\n    playPrevious,\n    hasNext,\n    hasPrevious,\n    clearPlayerState\n  } = usePlayer(); // disparar essa função toda vez que isPlaying for alterado  \n\n  useEffect(() => {\n    // não retorna nada\n    if (!audioRef.current) {\n      return;\n    } // Se isPlaying for true - play\n\n\n    if (isPlaying) {\n      audioRef.current.play(); // agora se isPlaying for falso - pausar\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n\n  function setuoProgressListener() {\n    audioRef.current.currentTime = 0;\n    audioRef.current.addEventListener('timeupdate', () => {\n      setProgress(Math.floor(audioRef.current.currentTime));\n    });\n  }\n\n  ;\n\n  function handleSeek(amount) {\n    audioRef.current.currentTime = amount;\n    setProgress(amount);\n  }\n\n  ;\n\n  function handleEpisodeEnded() {\n    if (hasNext) {\n      playNext();\n    } else {\n      clearPlayerState();\n    }\n  }\n\n  ;\n  const episode = episodeList[currentEpisodeIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.playerContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/playing.svg\",\n        alt: \"Tocando agora\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Tocando agora \", episode === null || episode === void 0 ? void 0 : episode.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), episode ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.currentEpisode,\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        width: 592,\n        height: 592,\n        src: episode.thumbnail,\n        objectFit: \"cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: episode.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: episode.members\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.emptyPlayer,\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Selecione um podcast para ouvir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: !episode ? styles.empty : '',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.progress,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: convertDurationToTimeString(progress)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.slider,\n          children: episode ? /*#__PURE__*/_jsxDEV(Slider, {\n            max: episode.duration,\n            value: progress,\n            onChange: handleSeek,\n            trackStyle: {\n              backgroundColor: '#04d361'\n            },\n            railStyle: {\n              background: '#9f75ff'\n            },\n            handleStyle: {\n              borderColor: '#04d361',\n              borderWidth: 4\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.emptySlider\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: convertDurationToTimeString((_episode$duration = episode === null || episode === void 0 ? void 0 : episode.duration) !== null && _episode$duration !== void 0 ? _episode$duration : 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), episode && /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: episode.url,\n        ref: audioRef,\n        loop: isLooping,\n        autoPlay: true,\n        onEnded: handleEpisodeEnded,\n        onPlay: () => setPlayingState(true),\n        onPause: () => setPlayingState(false),\n        onLoadedMetadata: setuoProgressListener\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          disabled: !episode || episodeList.length === 1,\n          onClick: toggleShuffle,\n          className: isShuffling ? styles.isActive : '',\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/shuffle.svg\",\n            alt: \"Embaralhar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: playPrevious,\n          disabled: !episode || !hasPrevious,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/play-previous.svg\",\n            alt: \"Tocar anterior\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: styles.playButton,\n          disabled: !episode,\n          onClick: togglePlay,\n          children: isPlaying ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/pause.svg\",\n            alt: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/play.svg\",\n            alt: \"Tocar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: playNext,\n          disabled: !episode || !hasNext,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/play-next.svg\",\n            alt: \"Tocar pr\\xF3xima\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          disabled: !episode,\n          onClick: toggleLoop,\n          className: isLooping ? styles.isActive : '',\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/repeat.svg\",\n            alt: \"Repetir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/leonardt/code/React/podcasternext/src/components/Player/index.tsx"],"names":["Image","useRef","useEffect","useState","Slider","usePlayer","styles","convertDurationToTimeString","Player","audioRef","progress","setProgress","episodeList","currentEpisodeIndex","isPlaying","isLooping","isShuffling","togglePlay","toggleLoop","toggleShuffle","setPlayingState","playNext","playPrevious","hasNext","hasPrevious","clearPlayerState","current","play","pause","setuoProgressListener","currentTime","addEventListener","Math","floor","handleSeek","amount","handleEpisodeEnded","episode","playerContainer","title","currentEpisode","thumbnail","members","emptyPlayer","empty","slider","duration","backgroundColor","background","borderColor","borderWidth","emptySlider","url","buttons","length","isActive","playButton"],"mappings":"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","sourcesContent":["import Image from 'next/image';\nimport { useRef, useEffect, useState } from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css' \nimport { usePlayer } from '../../contexts/PlayerContext';\nimport styles from './styles.module.scss'\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\n\nexport function Player() {\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const [progress, setProgress] = useState(0);\n\n  const { \n    episodeList, \n    currentEpisodeIndex, \n    isPlaying,\n    isLooping,\n    isShuffling,\n    togglePlay,\n    toggleLoop,\n    toggleShuffle,\n    setPlayingState,\n    playNext,\n    playPrevious,\n    hasNext,\n    hasPrevious,\n    clearPlayerState\n  } = usePlayer();\n\n  // disparar essa função toda vez que isPlaying for alterado  \n  useEffect(() =>{\n        // não retorna nada\n    if (!audioRef.current) {\n      return;\n    }\n      // Se isPlaying for true - play\n    if (isPlaying) {\n      audioRef.current.play();\n\n      // agora se isPlaying for falso - pausar\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying])\n\n  function setuoProgressListener() {\n    audioRef.current.currentTime = 0;\n\n    audioRef.current.addEventListener('timeupdate', () => {\n      setProgress(Math.floor(audioRef.current.currentTime))\n    });\n  };\n\n  function handleSeek(amount: number) {\n    audioRef.current.currentTime = amount;\n    setProgress(amount);\n  };\n\n  function handleEpisodeEnded() {\n    if (hasNext) {\n       playNext()\n    } else {\n      clearPlayerState()\n    }\n  };\n\n  const episode = episodeList[currentEpisodeIndex]\n\n  return (\n    <div className={styles.playerContainer}>\n      <header>\n        <img src=\"/playing.svg\" alt=\"Tocando agora\" />\n        <strong>Tocando agora {episode?.title}</strong>\n      </header>\n      {/* Se existir o epsodio mostrar isso se não existir mostrar \"Selecione um podcast para ouvir\" */}\n      { episode ? (\n        <div className={styles.currentEpisode}>\n          <Image\n            width={592}\n            height={592}\n            src={episode.thumbnail}\n            objectFit=\"cover\"\n          />\n          <strong>{episode.title}</strong>\n          <span>{episode.members}</span>\n        </div>\n      ) : (\n        <div className={styles.emptyPlayer}>\n          <strong>Selecione um podcast para ouvir</strong>\n        </div>\n      ) }\n\n                        {/* casso eu não tenha um epsodio */}\n      <footer className={ !episode ? styles.empty : ''}> \n        <div className={styles.progress}>\n          <span>{convertDurationToTimeString(progress)}</span>\n          <div className={styles.slider}> \n          {/* se eu tiver um epsodio vou mostrar <Slider/> se não vou mostrar emptySlider */}\n          { episode ? (\n            <Slider\n              max={episode.duration}\n              value={progress}\n              onChange={handleSeek}\n              trackStyle={{backgroundColor: '#04d361'}}\n              railStyle={{ background: '#9f75ff'}}\n              handleStyle={{borderColor: '#04d361', borderWidth: 4}}\n            />\n          ) : (\n            <div className={styles.emptySlider}/>\n          )}\n          </div>\n          <span>{convertDurationToTimeString(episode?.duration ?? 0)}</span>\n        </div>\n\n        { episode && (\n          <audio\n            src={episode.url}\n            ref={audioRef}\n            loop={isLooping}\n            autoPlay\n            onEnded={handleEpisodeEnded}\n            onPlay={() => setPlayingState(true)}\n            onPause={() => setPlayingState(false)}\n            onLoadedMetadata={setuoProgressListener}\n          />\n        )}\n\n        <div className={styles.buttons}>\n                                {/* desabilitado caso não tenha epsidode tocando */}\n          <button \n            type=\"button\" \n            disabled={!episode || episodeList.length === 1 }\n            onClick={toggleShuffle}\n            className={isShuffling ? styles.isActive : ''}\n          >\n            <img src=\"/shuffle.svg\" alt=\"Embaralhar\"/>\n          </button>\n          <button type=\"button\" onClick={playPrevious} disabled={!episode || !hasPrevious}>\n            <img src=\"/play-previous.svg\" alt=\"Tocar anterior\"/>\n          </button>\n          <button \n            type=\"button\" \n            className={styles.playButton}\n            disabled={!episode}\n            onClick={togglePlay}\n          >\n             {/* se estiver tocando  mostrar pause se não mostra tocar*/}\n            { isPlaying \n              ? <img src=\"/pause.svg\" alt=\"Pause\"/> \n              : <img src=\"/play.svg\" alt=\"Tocar\" />\n            }\n          </button>\n          <button type=\"button\" onClick={playNext} disabled={!episode || !hasNext}>\n            <img src=\"/play-next.svg\" alt=\"Tocar próxima\"/>\n          </button>\n          <button \n            type=\"button\" \n            disabled={!episode}\n            onClick={toggleLoop}\n            className={isLooping ? styles.isActive : ''}\n          >\n            <img src=\"/repeat.svg\" alt=\"Repetir\"/>\n          </button>\n        </div>\n      </footer>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}